WARNING: unknown option '-slave'


R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> setwd('d:/temp/delete/github/ncov/')
> # Functions ----
> 
> ## Packages ----
> # remotes::install_github('pzhaonet/ncovr')
> require(ncovr)
Loading required package: ncovr
> require(leafletCN)
Loading required package: leafletCN
Warning message:
package 'leafletCN' was built under R version 3.6.2 
> require(htmlwidgets)
Loading required package: htmlwidgets
> require(htmltools)
Loading required package: htmltools
> Sys.setlocale('LC_CTYPE', 'Chinese')
[1] "Chinese (Simplified)_China.936"
> 
> ## backup data
> ncov <- get_ncov(port = c('area?latest=0', 'overall', 'provinceName', 'news', 'rumors'), method = 'api')
No encoding supplied: defaulting to UTF-8.
No encoding supplied: defaulting to UTF-8.
No encoding supplied: defaulting to UTF-8.
No encoding supplied: defaulting to UTF-8.
No encoding supplied: defaulting to UTF-8.
> names(ncov)[1] <- 'area'
> ncov_tidy <- ncovr:::conv_ncov(ncov)
> if(!dir.exists('static/data')) dir.create('static/data')
> saveRDS(ncov_tidy, 'static/data/ncov_tidy.RDS')
> saveRDS(ncov, 'static/data/ncov.RDS')
> 
> 
> ## Create map post ----
> post_map <- function(method, date){
+   prefix <- switch(method, 'province' = 'Ê¡', 'city' = '??')
+   filename <- paste0(method, '-map-', date)
+   pathname <- paste0('content/post/', filename, '.Rmd')
+   # if(!file.exists(pathname)){
+     link <- paste0('https://pzhaonet.github.io/ncov/leaflet/leafmap-', method, '-', date, '.html')
+     filetext <- readLines('static/template/post-map.Rmd', encoding = 'UTF-8')
+     filetext <- gsub("<<method>>", method, filetext)
+     filetext <- gsub("<<method-zh>>", prefix, filetext)
+     filetext <- gsub("<<date>>", date, filetext)
+     writeLines(filetext, pathname, useBytes = TRUE)
+   # }
+ }
> 
> post_predict <- function(date){
+   filename <- paste0('predict-', date)
+   pathname <- paste0('content/post/', filename, '.Rmd')
+   # if(!file.exists(pathname)){
+     filetext <- readLines('static/template/post-predict.Rmd', encoding = 'UTF-8')
+     filetext <- gsub("<<date>>", date, filetext)
+     writeLines(filetext, pathname, useBytes = TRUE)
+   # }
+ }
> 
> ## Get data ----
> # ncov <- get_ncov()
> ncov$area$date <- as.character(as.Date(ncovr:::conv_time(ncov$area$updateTime)))
> ncov$area <- ncov$area[!duplicated(paste(ncov$area$provinceName, ncov$area$date)), ]
> ncov_dates <- unique(ncov$area$date)
> 
> ## create maps ----
> oldwd <- getwd()
> setwd('static/leaflet')
> 
> for(i in ncov_dates){
+   # province 
+   filename <- paste0("leafmap-province-", i, ".html")
+   if(!file.exists(filename)){
+     leafMap <- plot_map(
+       x = ncov$area[ncov$area$date == i, ], 
+       key = c("confirmedCount", "suspectedCount", "curedCount", "deadCount")[1], 
+       scale = "log", 
+       method = c("province", "city")[1], 
+       legend_title = paste0("È·?ï²¡??(", i, ")"), 
´íÎó: ¾ä·¨·ÖÎöÆ÷10ÐÐÀï²»ÄÜÓÐ¶à×Ö½Ú×Ö·û
Í£Ö¹Ö´ÐÐ
